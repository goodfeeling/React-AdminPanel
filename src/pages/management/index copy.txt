import { Icon } from "@/components/icon";
import { usePathname, useRouter } from "@/routes/hooks";
import { Badge } from "@/ui/badge";
import { Button } from "@/ui/button";
import { Card, CardContent, CardHeader } from "@/ui/card";
import { Table } from "antd";
import { useCallback, useEffect, useState } from "react";
import type { PageList, Role, UserInfo } from "#/entity";
import { BasicStatus } from "#/enum";

import userService from "@/api/services/userService";
import type { GetProp, TableProps } from "antd";
type ColumnsType<T extends object = object> = TableProps<T>["columns"];
type TablePaginationConfig = Exclude<GetProp<TableProps, "pagination">, boolean>;
export default function UserPage() {
	const { push } = useRouter();
	const pathname = usePathname();
	const [loading, setLoading] = useState(false);
	const [users, setUsers] = useState<PageList<UserInfo>>();

	const getData = useCallback(async () => {
		const response = await userService.searchPageList("page=1&pageSize=10");
		setUsers(response);
		setLoading(false);
	}, []);

	useEffect(() => {
		setLoading(true);
		getData();
	}, [getData]);
	// const columns: ColumnsType<UserInfo> = [
	// 	{
	// 		title: "UserName",
	// 		dataIndex: "user_name",
	// 		width: 300,
	// 		render: (_, record) => {
	// 			console.log(record);

	// 			return (
	// 				<div className="flex">
	// 					<img alt="" src={record.header_img} className="h-10 w-10 rounded-full" />
	// 					<div className="ml-2 flex flex-col">
	// 						<span className="text-sm">{record.user_name}</span>
	// 						<span className="text-xs text-text-secondary">{record.email}</span>
	// 					</div>
	// 				</div>
	// 			);
	// 		},
	// 	},
	// 	{
	// 		title: "Status",
	// 		dataIndex: "status",
	// 		align: "center",
	// 		width: 120,
	// 		render: (status) => {
	// 			console.log(status);

	// 			return (
	// 				<Badge variant={status === BasicStatus.DISABLE ? "error" : "success"}>
	// 					{status === BasicStatus.DISABLE ? "Disable" : "Enable"}
	// 				</Badge>
	// 			);
	// 		},
	// 	},
	// 	{
	// 		title: "Action",
	// 		key: "operation",
	// 		align: "center",
	// 		width: 100,
	// 		render: (_, record) => (
	// 			<div className="flex w-full justify-center text-gray-500">
	// 				<Button
	// 					variant="ghost"
	// 					size="icon"
	// 					onClick={() => {
	// 						push(`${pathname}/${record.id}`);
	// 					}}
	// 				>
	// 					<Icon icon="mdi:card-account-details" size={18} />
	// 				</Button>
	// 				<Button variant="ghost" size="icon" onClick={() => {}}>
	// 					<Icon icon="solar:pen-bold-duotone" size={18} />
	// 				</Button>
	// 				<Button variant="ghost" size="icon">
	// 					<Icon icon="mingcute:delete-2-fill" size={18} className="text-error!" />
	// 				</Button>
	// 			</div>
	// 		),
	// 	},
	// ];

	const columns: ColumnsType<UserInfo> = [
		{
			title: "ID",
			dataIndex: "id",
			key: "id",
		},
		{
			title: "UUID",
			dataIndex: "uuid",
			key: "uuid",
		},
		{
			title: "邮箱",
			dataIndex: "email",
			key: "email",
		},

		{
			title: "用户名",
			dataIndex: "user_name",
			key: "user_name",
		},
		{
			title: "昵称",
			dataIndex: "nick_name",
			key: "nick_name",
		},
		{
			title: "头像",
			dataIndex: "header_img",
			key: "header_img",
		},
		{
			title: "手机",
			dataIndex: "phone",
			key: "phone",
		},
		{
			title: "状态",
			dataIndex: "status",
			key: "status",
		},
		{
			title: "创建时间",
			dataIndex: "created_at",
			key: "created_at",
		},
		{
			title: "更新时间",
			dataIndex: "updated_at",
			key: "updated_at",
		},
	];

	const handleTableChange: TableProps<UserInfo>["onChange"] = (pagination, filters, sorter) => {
		console.log(pagination);
	};
	return (
		<Card>
			<CardHeader>
				<div className="flex items-center justify-between">
					<div>User List</div>
					<Button onClick={() => {}}>New</Button>
				</div>
			</CardHeader>
			<CardContent>
				<Table
					rowKey={(record) => record.id}
					size="small"
					scroll={{ x: "max-content" }}
					pagination={false}
					columns={columns}
					dataSource={users?.data}
					loading={loading}
					onChange={handleTableChange}
				/>
			</CardContent>
		</Card>
	);
}
